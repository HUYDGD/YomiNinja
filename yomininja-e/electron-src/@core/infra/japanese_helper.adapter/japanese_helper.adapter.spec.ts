import { AutoGeneratedFurigana } from "../../application/adapters/japanese_helper.adapter";
import { JapaneseHelper } from "./japanese_helper.adapter";


function replaceSubstring( str: string, start: number, end: number, replacement: string ) {
    if (start < 0 || start >= str.length || end < start || end >= str.length) {
        // Handle invalid indices
        return str;
    }

    return str.slice(0, start) + replacement + str.slice(end + 1);
}



describe('Dictionary utilities tests', () => {

    const japaneseHelper = new JapaneseHelper();

    type SimpleHeadword = {
        term: string;
        reading: string;
    };
    
    const headwords: SimpleHeadword[] = [
        {
            term: "傘を忘れました",
            reading: "かさをわすれました",
        },
        {
            term: "阿吽の呼吸",
            reading: "あうんのこきゅう",
        },
        {
            term: "あうんの呼吸",
            reading: "あうんのこきゅう",
        },        
        {
            term: "あっとゆう間に",
            reading: "あっというまに",
        },
        {
            term: "アッとゆう間に",
            reading: "あっというまに",
        },
        {
            term: "ＣＤプレーヤー",
            reading: "シーディープレーヤー",
        },
        {
            term: "海鷂魚",
            reading: "えい",
        },
        {
            term: "おっちょこちょい",
            reading: "",
        },
    ];

    // Tests if the generated furigana is compatible with the official reading
    function validateFurigana( headword: SimpleHeadword, furigana: AutoGeneratedFurigana[] ) {

        let generatedReading = headword.term;

        // How the original string length changed
        let offset = 0;

        furigana.forEach( item => {
            generatedReading = replaceSubstring(
                generatedReading,
                item.startIdx + offset,
                item.endIdx + offset,
                item.text
            );

            const replacedStrLength = item.endIdx - item.startIdx + 1;
            offset += item.text.length - replacedStrLength;            
        });

        expect( generatedReading ).toStrictEqual( headword.reading );
    }

    it('should check if a character is a kanji', () => {

        const kanjiInput: string = '傘';
        const hiraganaInput: string = 'あ';
        const katakanaInput: string = 'ア';
        const latinInput: string = 'A';
        
        expect( japaneseHelper.isKanji( kanjiInput ) )
            .toStrictEqual( true );

        expect( japaneseHelper.isKanji( hiraganaInput ) )
            .toStrictEqual( false );

        expect( japaneseHelper.isKanji( katakanaInput ) )
            .toStrictEqual( false );

        expect( japaneseHelper.isKanji( latinInput ) )
            .toStrictEqual( false );
    });

    it('should generate a furigana for: 傘を忘れました', () => {

        const input = headwords.find( item => item.term === '傘を忘れました' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 2 ).toBeTruthy();

        expect( result.furigana[0].text ).toStrictEqual( 'かさ' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 0 );

        expect( result.furigana[1].text ).toStrictEqual( 'わす' );
        expect( result.furigana[1].startIdx ).toStrictEqual( 2 );
        expect( result.furigana[1].endIdx ).toStrictEqual( 2 );

        validateFurigana( input, result.furigana )
    });

    it('Should generate a furigana for: 阿吽の呼吸', () => {

        const input = headwords.find( item => item.term === '阿吽の呼吸' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 2 ).toBeTruthy();
        expect( result.furigana[0].text ).toStrictEqual( 'あうん' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 1 );

        expect( result.furigana[1].text ).toStrictEqual( 'こきゅう' );
        expect( result.furigana[1].startIdx ).toStrictEqual( 3 );
        expect( result.furigana[1].endIdx ).toStrictEqual( 4 );

        validateFurigana( input, result.furigana )
    });


    it('Should generate a furigana for: あっとゆう間に', () => {

        const input = headwords.find( item => item.term === 'あっとゆう間に' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 1 ).toBeTruthy();

        expect( result.furigana[0].text ).toStrictEqual( 'あっというまに' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 6 );
        
        validateFurigana( input, result.furigana )
    });

    it('Should generate a furigana for: アッとゆう間に', () => {

        const input = headwords.find( item => item.term === 'アッとゆう間に' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 1 ).toBeTruthy();

        expect( result.furigana[0].text ).toStrictEqual( 'あっというまに' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 6 );

        validateFurigana( input, result.furigana )
    });

    it('Should generate a furigana for: ＣＤプレーヤー', () => {

        const input = headwords.find( item => item.term === 'ＣＤプレーヤー' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 1 ).toBeTruthy();
        expect( result.furigana[0].text ).toStrictEqual( 'シーディープレーヤー' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 6 );

        validateFurigana( input, result.furigana )
    });

    it('Should generate a furigana for: 海鷂魚', () => {

        const input = headwords.find( item => item.term === '海鷂魚' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 1 ).toBeTruthy();

        expect( result.furigana[0].text ).toStrictEqual( 'えい' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 2 );

        validateFurigana( input, result.furigana )
    });

    it('Should generate a furigana for: おっちょこちょい', () => {

        const input = headwords.find( item => item.term === 'おっちょこちょい' );
        expect( input ).toBeDefined();
        if ( !input ) return;

        const result = japaneseHelper.generateFurigana({
            term: input.term,
            reading: input.reading,
        });
        // console.log(result);

        expect( result.furigana.length === 1 ).toBeTruthy();
        expect( result.furigana[0].text ).toStrictEqual( '' );
        expect( result.furigana[0].startIdx ).toStrictEqual( 0 );
        expect( result.furigana[0].endIdx ).toStrictEqual( 7 );

        validateFurigana( input, result.furigana )
    });
});